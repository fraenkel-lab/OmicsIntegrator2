<!DOCTYPE html>
<html>
<head>
 <title>Omics Integrator Result</title>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.0.0/cytoscape.js"></script>
 <script src="https://use.fontawesome.com/a681668be3.js"></script>
 <script src="graph.js"></script>
 <script src="style.js"></script>
 <script src="FileSaver.js"></script>

</head>
<style>
    #cy {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 48px;
        left: 245px;
    }
</style>
<style>
@import url(https://fonts.googleapis.com/css?family=Open+Sans);
body{
  font-family: 'Open Sans', sans-serif;
}

/* create a legend */
.legend { list-style: none; padding:0; margin:0; }
.legend span { border: 1px solid #ccc; float: left; width: 12px; height: 12px; margin: 2px; }

/* legend for node colors (protein-level changes) */
.legend .positiveprotein {width: 6px; height: 13px; background: red; position: relative; border: 0px solid white; margin: 3px; margin-right: 8px;}
.legend .positiveprotein:before { content: ""; position: absolute; left: -6px; top: 0; background: #be0101; width: 6px; height: 13px; border: 0px solid white;}
.legend .positiveprotein:after { content: ""; position: absolute; right: -6px; top: 0; background: #ff9999; width: 6px; height: 13px; border: 0px solid white;}
.legend .zeroprotein { background-color: #ccffff; }
.legend .negativeprotein {width: 6px; height: 13px; background: blue; position: relative; border: 0px solid white; margin: 3px; margin-right: 8px;}
.legend .negativeprotein:before { content: ""; position: absolute; left: -6px; top: 0; background: #000066; width: 6px; height: 13px; border: 0px solid white;}
.legend .negativeprotein:after { content: ""; position: absolute; right: -6px; top: 0; background: #9999ff; width: 6px; height: 13px; border: 0px solid white;}

/* legend for node border colors (gene-level changes) */
.legend .positivegene { background-color: white; border-color: orange; border: 4px solid orange; width: 8px; height: 8px;}
.legend .zerogene { background-color: white; border-color: gray;}
.legend .negativegene { background-color: white; border-color: #990099; border: 4px solid #990099; width: 8px; height: 8px;}

/* legend for edge colors (interaction types) */
.legend .ppedge { background-color: #999999; border-color: white; border: 6px solid white; width: 30px; height: 4px; margin-right: 1px;}
.legend .tpedge { background-color: #98E907; position: relative; border-color: white; border: 6px solid white; width: 30px; height: 4px; margin-right: 3px;}
.legend .tpedge:after { content: ""; position: absolute; right: -6px; top: -3px; width: 0; height: 0; border-top: 5.5px solid transparent; border-left: 6px solid #98E907; border-bottom: 5.5px solid transparent; }
.legend .pdedge { background-color: #339900; position: relative; border-color: white; border: 6px solid white; width: 30px; height: 4px; margin-right: 3px;}
.legend .pdedge:after { content: ""; position: absolute; right: -6px; top: -3px; width: 0; height: 0; border-top: 5.5px solid transparent; border-left: 6px solid #339900; border-bottom: 5.5px solid transparent; }

/* legend for node shapes (node types) */
.legend .rectangle { width: 18px; height: 10px; background: black; border-color: white; margin: 3px;}
.legend .oval { width: 18px; height: 9px; background: black; -moz-border-radius: 10px / 5px; -webkit-border-radius: 10px / 5px; border-radius: 10px / 5px; border-color: black; margin: 4px;}
.legend .triangle { width: 0; height: 0; border-left: 9px solid transparent; border-right: 9px solid transparent; border-bottom: 12px solid black; border-top: 1px solid transparent;}
.legend .diamond { width: 0; height: 0; border: 11px solid transparent; border-bottom: 6.5px solid #40bf40; position: relative; top: -11px;} 
.legend .diamond:after { content: ''; position: absolute; left: -11px; top: 6.5px; width: 0; height: 0; border: 11px solid transparent; border-top: 6.5px solid #40bf40; }
.legend .hexagon { width: 12px; height: 11px; background: black; position: relative; border-color: white; margin: 3px; margin-right: 6px;}
.legend .hexagon:before { content: ""; position: absolute; left: -6px; top: 0; width: 0; height: 0; border-top: 5.5px solid transparent; border-right: 6px solid black; border-bottom: 5.5px solid transparent; }
.legend .hexagon:after { content: ""; position: absolute; right: -6px; top: 0; width: 0; height: 0; border-top: 5.5px solid transparent; border-left: 6px solid black; border-bottom: 5.5px solid transparent; }

/* Search bar */
.searchTerm {
  float: left;
  border: 3px solid #00B4CC;
  padding: 5px;
  height: 20px;
  border-radius: 5px;
  outline: none;
  color: #9DBFAF;
}

.searchTerm:focus{
  color: #00B4CC;
}

.searchButton { 
  right: -50px;
  width: 40px;
  height: 36px;
  border: 1px solid #00B4CC;
  background: #00B4CC;
  text-align: center;
  color: #fff;
  border-radius: 5px;
  cursor: pointer;
  font-size: 20px;
}

input[type=button] {
  border: 3px solid #00B4CC;
  height: 36px;
  border-radius: 5px;
  outline: none;
  background-color: white;
}
input[type=button]:hover {background-color: #F2F1F2;}
input[type=button]:active {background-color: #908F90;}

</style>

<!-- Body with JSON button, search bar, legend, & network-->
<body>
  <table width="100%" border="0">
    <tr>
    <td width=110px style="padding: 0; margin: 0;">
      <img src="http://fraenkel-nsf.csbi.mit.edu/omicsintegrator/omicsI_logo.png" height=85px>
    </td>
    <td style="vertical-align:top" width=190px>
      <div class="search">
        <input type="text" class="searchTerm" placeholder="Search for Node">
        <button type="submit" class="searchButton"><i class="fa fa-search"></i></button>
      </div>
    </td>
    <td style="vertical-align:top">
      <form name="formJSON"> 
        <input type="button" onClick="saveJSON();" value="Save JSON">
      </form>
    </td>
    </tr>
  </table>
  <ul class="legend">
    <li>Input Data:</li>
    <li><span class="positiveprotein"></span> Protein-Level Change > 0</li>
    <li><span class="zeroprotein"></span> Protein-Level Change = 0</li>
    <li><span class="negativeprotein"></span> Protein-Level Change < 0</li>
    <li><span class="positivegene"></span> Gene-Level Change > 0</li>
    <li><span class="zerogene"></span> Gene-Level Change = 0</li>
    <li><span class="negativegene"></span> Gene-Level Change < 0</li>
    <br/>
    <li>Interaction Types:</li>
    <li><span class="ppedge"></span> Protein-Protein or <br/> <span style="display:inline-block; width: 40px; border: none;"></span> Protein-Metabolite</li>
    <li><span class="tpedge"></span> mRNA &rarr; Protein Product</li>
    <li><span class="pdedge"></span> TF &rarr; mRNA target <br/> <span style="display:inline-block; width: 40px; border: none;"></span> (from Garnet)</li>
    <br/>
    <li> Molecule Types:</li>
    <li><span class="rectangle"></span> Protein</li>
    <li><span class="oval"></span> Metabolite</li>
    <li><span class="triangle"></span> TF</li>
    <li><span class="diamond"></span> mRNA</li>
    <li><span class="hexagon"></span> Steiner</li>
  </ul>
</body>
<body>
  <div id="cy"></div>
  <script>
  /*
   * Use the Cytoscape.js library to display the network.
   * Use the cose layout algorithm for layout placement. 
   */

  var cy = cytoscape({
    container: document.getElementById('cy'),
    style: style[0].style,
    layout: {
        name: 'cose',
        padding: 45,
        randomize: true,
        componentSpacing: 250,
        nodeRepulsion: function( node ){ return 400000; },
        nodeOverlap: 10,
        idealEdgeLength: function( edge ){ return 10; },
        edgeElasticity: function( edge ){ return 100; },
        nestingFactor: 5,
        gravity: 80,
        numIter: 1000,
        initialTemp: 200,
        coolingFactor: 0.95,
        minTemp: 1.0,
        useMultitasking: true
    },
    elements: graph.elements
    });

    /* 
     * saveJSON() function:
     *
     * Save current network to a JSON file on the local machine.
     */

    function saveJSON() 
    { 
    var jsonBlob = new Blob([JSON.stringify( cy.json() )], { type: 'application/javascript;charset=utf-8' });
    saveAs(jsonBlob, "graph_json.json");
    } 
  </script>
</body>
</html>
